apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-script
  namespace: neurashield
data:
  backup-recovery.sh: |
    #!/bin/bash
    
    # NeuraShield Backup and Recovery Script
    # This script handles automated backup and recovery procedures
    
    # Default variables
    BACKUP_DIR="/backups"
    RETENTION_DAYS=30
    BACKUP_COMPONENTS=("database" "models" "blockchain" "configs" "ipfs")
    ACTION="backup"
    ENVIRONMENT="kubernetes"
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
      case $1 in
        --backup)
          ACTION="backup"
          shift
          ;;
        --restore)
          ACTION="restore"
          shift
          ;;
        --verify)
          ACTION="verify"
          shift
          ;;
        --timestamp)
          RESTORE_TIMESTAMP="$2"
          shift 2
          ;;
        --components)
          IFS=',' read -ra BACKUP_COMPONENTS <<< "$2"
          shift 2
          ;;
        *)
          echo "Unknown option: $1"
          exit 1
          ;;
      esac
    done
    
    # Create backup directory
    mkdir -p "${BACKUP_DIR}/${TIMESTAMP}"
    
    if [[ "$ACTION" == "backup" ]]; then
      echo "Starting backup process with timestamp: ${TIMESTAMP}"
      
      # Backup database
      echo "Backing up database..."
      if kubectl get pods -l app=mongodb -n neurashield &>/dev/null; then
        kubectl exec -n neurashield $(kubectl get pods -l app=mongodb -n neurashield -o jsonpath="{.items[0].metadata.name}") -- mongodump --out=/tmp/mongodb_backup
        kubectl cp -n neurashield $(kubectl get pods -l app=mongodb -n neurashield -o jsonpath="{.items[0].metadata.name}"):/tmp/mongodb_backup "${BACKUP_DIR}/${TIMESTAMP}/mongodb_backup"
      else
        echo "MongoDB not found, skipping database backup"
        # Fallback to local volume if available
        if [ -d "/mnt/mongodb" ]; then
          mkdir -p "${BACKUP_DIR}/${TIMESTAMP}/mongodb_backup"
          cp -r /mnt/mongodb/* "${BACKUP_DIR}/${TIMESTAMP}/mongodb_backup/"
        fi
      fi
      
      # Backup AI models
      echo "Backing up AI models..."
      mkdir -p "${BACKUP_DIR}/${TIMESTAMP}/models"
      cp -r /mnt/models/* "${BACKUP_DIR}/${TIMESTAMP}/models/" 2>/dev/null || echo "No model files found"
      
      # Backup blockchain data
      echo "Backing up blockchain data..."
      mkdir -p "${BACKUP_DIR}/${TIMESTAMP}/blockchain"
      cp -r /mnt/blockchain/* "${BACKUP_DIR}/${TIMESTAMP}/blockchain/" 2>/dev/null || echo "No blockchain files found"
      
      # Backup IPFS data
      echo "Backing up IPFS data..."
      mkdir -p "${BACKUP_DIR}/${TIMESTAMP}/ipfs"
      cp -r /mnt/ipfs/* "${BACKUP_DIR}/${TIMESTAMP}/ipfs/" 2>/dev/null || echo "No IPFS files found"
      
      # Backup configuration files
      echo "Backing up configuration files..."
      mkdir -p "${BACKUP_DIR}/${TIMESTAMP}/configs"
      kubectl get configmaps -n neurashield -o yaml > "${BACKUP_DIR}/${TIMESTAMP}/configs/configmaps.yaml"
      kubectl get secrets -n neurashield -o yaml > "${BACKUP_DIR}/${TIMESTAMP}/configs/secrets.yaml"
      
      # Clean up old backups
      echo "Cleaning up backups older than ${RETENTION_DAYS} days..."
      find "$BACKUP_DIR" -type d -mtime +${RETENTION_DAYS} -exec rm -rf {} \; 2>/dev/null || true
      
      echo "Backup process completed successfully!"
    
    elif [[ "$ACTION" == "verify" ]]; then
      if [ -z "$RESTORE_TIMESTAMP" ]; then
        # Get the most recent backup
        LATEST_BACKUP=$(find "$BACKUP_DIR" -maxdepth 1 -type d -name "20*" | sort -r | head -n 1)
        if [[ -n "$LATEST_BACKUP" ]]; then
          RESTORE_TIMESTAMP=$(basename "$LATEST_BACKUP")
          echo "No timestamp specified, using latest backup: ${RESTORE_TIMESTAMP}"
        else
          echo "Error: No backups found to verify"
          exit 1
        fi
      fi
      
      echo "Starting verification of backup: ${RESTORE_TIMESTAMP}"
      
      # Check if backup exists
      if [[ ! -d "${BACKUP_DIR}/${RESTORE_TIMESTAMP}" ]]; then
        echo "Error: Backup with timestamp ${RESTORE_TIMESTAMP} not found!"
        exit 1
      fi
      
      VERIFICATION_ERRORS=0
      
      # Check database backup
      if [[ " ${BACKUP_COMPONENTS[*]} " =~ " database " ]]; then
        if [ ! -d "${BACKUP_DIR}/${RESTORE_TIMESTAMP}/mongodb_backup" ]; then
          echo "Error: Database backup is missing or incomplete"
          VERIFICATION_ERRORS=$((VERIFICATION_ERRORS+1))
        else
          echo "Database backup verification: OK"
        fi
      fi
      
      # Check models backup
      if [[ " ${BACKUP_COMPONENTS[*]} " =~ " models " ]]; then
        if [ ! -d "${BACKUP_DIR}/${RESTORE_TIMESTAMP}/models" ]; then
          echo "Error: AI models backup is missing or incomplete"
          VERIFICATION_ERRORS=$((VERIFICATION_ERRORS+1))
        else
          if [ -z "$(ls -A "${BACKUP_DIR}/${RESTORE_TIMESTAMP}/models" 2>/dev/null)" ]; then
            echo "Warning: AI models backup directory is empty"
          else
            echo "AI models backup verification: OK"
          fi
        fi
      fi
      
      # Check blockchain backup
      if [[ " ${BACKUP_COMPONENTS[*]} " =~ " blockchain " ]]; then
        if [ ! -d "${BACKUP_DIR}/${RESTORE_TIMESTAMP}/blockchain" ]; then
          echo "Error: Blockchain backup is missing or incomplete"
          VERIFICATION_ERRORS=$((VERIFICATION_ERRORS+1))
        else
          echo "Blockchain backup verification: OK"
        fi
      fi
      
      # Check IPFS backup
      if [[ " ${BACKUP_COMPONENTS[*]} " =~ " ipfs " ]]; then
        if [ ! -d "${BACKUP_DIR}/${RESTORE_TIMESTAMP}/ipfs" ]; then
          echo "Error: IPFS backup is missing or incomplete"
          VERIFICATION_ERRORS=$((VERIFICATION_ERRORS+1))
        else
          echo "IPFS backup verification: OK"
        fi
      fi
      
      # Check configs backup
      if [[ " ${BACKUP_COMPONENTS[*]} " =~ " configs " ]]; then
        if [ ! -d "${BACKUP_DIR}/${RESTORE_TIMESTAMP}/configs" ]; then
          echo "Error: Configuration backup is missing or incomplete"
          VERIFICATION_ERRORS=$((VERIFICATION_ERRORS+1))
        else
          echo "Configuration backup verification: OK"
        fi
      fi
      
      if [ $VERIFICATION_ERRORS -gt 0 ]; then
        echo "Backup verification failed with ${VERIFICATION_ERRORS} errors"
        # Send alert
        kubectl create job --from=cronjob/send-alert temp-alert-job-$(date +%s) -n neurashield --quiet
        exit 1
      else
        echo "All backup components verified successfully!"
      fi
    fi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: neurashield-backup
  namespace: neurashield
spec:
  schedule: "0 1 * * *"  # Run daily at 1:00 AM
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 2
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: backup-sa
          containers:
          - name: backup
            image: bitnami/kubectl:latest
            command:
            - /bin/bash
            - /scripts/backup-recovery.sh
            - --backup
            volumeMounts:
            - name: backup-script
              mountPath: /scripts
            - name: backup-volume
              mountPath: /backups
            - name: models-volume
              mountPath: /mnt/models
              readOnly: true
            - name: blockchain-volume
              mountPath: /mnt/blockchain
              readOnly: true
            - name: ipfs-volume
              mountPath: /mnt/ipfs
              readOnly: true
            env:
            - name: KUBECONFIG
              value: /etc/kubernetes/kubeconfig
          restartPolicy: OnFailure
          volumes:
          - name: backup-script
            configMap:
              name: backup-script
              defaultMode: 0755
          - name: backup-volume
            persistentVolumeClaim:
              claimName: backup-pvc
          - name: models-volume
            persistentVolumeClaim:
              claimName: ai-models-pvc
          - name: blockchain-volume
            persistentVolumeClaim:
              claimName: blockchain-pvc
          - name: ipfs-volume
            persistentVolumeClaim:
              claimName: ipfs-pvc
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: neurashield-backup-verify
  namespace: neurashield
spec:
  schedule: "0 5 * * *"  # Run daily at 5:00 AM (after backup)
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 5
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: backup-sa
          containers:
          - name: verify-backup
            image: bitnami/kubectl:latest
            command:
            - /bin/bash
            - /scripts/backup-recovery.sh
            - --verify
            volumeMounts:
            - name: backup-script
              mountPath: /scripts
            - name: backup-volume
              mountPath: /backups
            env:
            - name: KUBECONFIG
              value: /etc/kubernetes/kubeconfig
          restartPolicy: OnFailure
          volumes:
          - name: backup-script
            configMap:
              name: backup-script
              defaultMode: 0755
          - name: backup-volume
            persistentVolumeClaim:
              claimName: backup-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-pvc
  namespace: neurashield
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ipfs-pvc
  namespace: neurashield
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backup-sa
  namespace: neurashield
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: backup-role
  namespace: neurashield
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets", "pods"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["pods/portforward"]
  verbs: ["create"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["create", "get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: backup-rolebinding
  namespace: neurashield
subjects:
- kind: ServiceAccount
  name: backup-sa
  namespace: neurashield
roleRef:
  kind: Role
  name: backup-role
  apiGroup: rbac.authorization.k8s.io 