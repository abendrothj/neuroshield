version: '3.8'

services:
  backend:
    build:
      context: .
      target: backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3001
      - AI_SERVICE_URL=http://ai-service:5000
      - IPFS_URL=http://ipfs:5001
      - CHANNEL_NAME=neurashield-channel
      - CONTRACT_NAME=neurashield
      - ORGANIZATION_ID=Org1
      - USER_ID=admin
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=neurashield
      - DB_USER=${DB_USER:-neurauser}
      - DB_PASSWORD=${DB_PASSWORD:-defaultpassword}
    volumes:
      - ./backend:/app/backend
      - backend-data:/app/backend/data
      - ./backend/logs:/app/backend/logs
    depends_on:
      - ai-service
      - ipfs
      - postgres
    networks:
      - neurashield-network
    restart: unless-stopped
    user: ${RUN_AS_ROOT:-appuser}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: .
      target: frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_SOCKET_URL=http://localhost:3001
      - NEXT_PUBLIC_AI_SERVICE_URL=http://localhost:5000
    volumes:
      - ./frontend:/app/frontend
      - /app/frontend/node_modules
      - /app/frontend/.next
    command: sh -c "if [ \"${NODE_ENV:-development}\" = \"development\" ]; then npx next dev; else npx next start; fi"
    depends_on:
      - backend
    networks:
      - neurashield-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  ai-service:
    build:
      context: .
      target: ai-service
    ports:
      - "5000:5000"
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - MODEL_PATH=/app/ai_models/models/threat_detection_20250403_212211
      - PORT=5000
      - METRICS_PORT=8000
      - LOG_LEVEL=INFO
      - INPUT_SHAPE=39
      - NUM_CLASSES=2
      - THREAT_THRESHOLD=0.8
      - API_TIMEOUT=30
      - MAX_BATCH_SIZE=100
      - CUDA_VISIBLE_DEVICES=-1
      - LOG_DIR=/logs
    volumes:
      - type: volume
        source: ai-model-data
        target: /app/ai_models/models
      - type: volume
        source: ai-logs
        target: /logs
    networks:
      - neurashield-network
    restart: unless-stopped
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  ipfs:
    image: ipfs/kubo:latest
    ports:
      - "5001:5001"
      - "8080:8080"
      - "4001:4001"
    volumes:
      - ipfs-data:/data/ipfs
    networks:
      - neurashield-network
    restart: unless-stopped
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "ipfs", "id"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - neurashield-network
    restart: unless-stopped
    depends_on:
      - backend
      - ai-service

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SERVER_ROOT_URL=https://monitoring.neurashield.com
      - GF_SECURITY_ALLOW_EMBEDDING=false
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY_MAX_AGE_SECONDS=15552000
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY_PRELOAD=true
      - GF_SECURITY_CONTENT_SECURITY_POLICY=true
      - GF_SECURITY_X_CONTENT_TYPE_OPTIONS=true
      - GF_SECURITY_X_XSS_PROTECTION=true
    volumes:
      - ./monitoring/grafana-provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - neurashield-network
    restart: unless-stopped
    user: "472:472"

  alert-manager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/config.yml
      - alertmanager-data:/data
    networks:
      - neurashield-network
    restart: unless-stopped
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - neurashield-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8082:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - neurashield-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-neurauser}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-defaultpassword}
      - POSTGRES_DB=neurashield
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - neurashield-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-neurauser} -d neurashield"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    user: "postgres"

  backup:
    image: alpine:latest
    volumes:
      - ./scripts/backup-recovery.sh:/backup-recovery.sh
      - ./scripts/crontab:/etc/crontabs/root
      - backup-data:/backups
      - ipfs-data:/data/ipfs:ro
      - ai-model-data:/app/ai_models/models:ro
      - backend-data:/app/backend/data:ro
      - prometheus-data:/prometheus:ro
      - grafana-data:/var/lib/grafana:ro
      - postgres-data:/var/lib/postgresql/data:ro
    environment:
      - BACKUP_DIR=/backups
      - RETENTION_DAYS=30
      - PGDUMP_HOST=postgres
      - PGDUMP_USER=${DB_USER:-neurauser}
      - PGDUMP_PASSWORD=${DB_PASSWORD:-defaultpassword}
      - PGDUMP_DB=neurashield
    command: ["crond", "-f", "-d", "8"]
    restart: unless-stopped
    networks:
      - neurashield-network
    depends_on:
      - postgres
      - backend
      - ai-service
      - ipfs

volumes:
  ipfs-data:
  prometheus-data:
  grafana-data:
  alertmanager-data:
  ai-model-data:
  ai-logs:
  backend-data:
  backup-data:
  postgres-data:

networks:
  neurashield-network:
    driver: bridge 